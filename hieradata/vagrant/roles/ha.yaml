---
#include:
#  default:
#    - profile::logging::rsyslog::client

# galera
#include:
#  default:
#    - profile::application::openssl
#    - profile::database::galera::arbitrator
#
#profile::database::galera::arbitrator::manage_arbitrator: true
#profile::database::galera::arbitrator::manage_firewall:   true

#profile::application::openssl::manage_ca_cert:            true
#profile::application::openssl::manage_dhparam:            true
#profile::application::openssl::certs:
#  "db.%{hiera('domain_trp')}":
#     cn:             "%{::hostname}.%{hiera('domain_trp')}"
#     concat_dhparam: true
#     altnames:
#       - "%{::hostname}.%{hiera('domain_trp')}"
#       - "db.%{hiera('domain_trp')}"
#
# db_ssl_key:       "/etc/pki/tls/private/db.%{hiera('domain_trp')}.key.pem"
# db_ssl_cert:      "/etc/pki/tls/certs/db.%{hiera('domain_trp')}.pem" # concat dhparam
# db_ssl_ca:        '/etc/pki/tls/certs/cachain.pem'
#
# wsrep_provider_options: "socket.ssl_key=%{hiera('db_ssl_key')};socket.ssl_cert=%{hiera('db_ssl_cert')};socket.ssl_ca=%{hiera('db_ssl_ca')};socket.ssl_cipher=AES128-SHA"
# wsrep_cluster_address:  "%{hiera('netcfg_trp_netpart')}.41:4567,%{hiera('netcfg_trp_netpart')}:4567,%{hiera('corosync_cluster_vip1')}:4567"
#
# # Enable extra yum repo
# profile::base::yumrepo::repo_hash:
#   mariadb:
#     ensure: present

#netdata
profile::monitoring::netdata::firewall_extras:
  source:       '0.0.0.0/0'

# corosync
corosync::unicast_addresses:
  - "%{hiera('netcfg_public_netpart')}.16"
  - "%{hiera('netcfg_public_netpart')}.17"

corosync::quorum_members:
  - "%{hiera('netcfg_public_netpart')}.16"
  - "%{hiera('netcfg_public_netpart')}.17"

corosync_cluster_node1:   "%{::location}-ha-01.%{hiera('domain_mgmt')}"
corosync_cluster_node2:   "%{::location}-ha-02.%{hiera('domain_mgmt')}"

corosync_cluster_vip1:    "%{hiera('netcfg_public_netpart')}.6"
corosync_cluster_vip2:    "%{hiera('netcfg_public_netpart')}.7"
corosync_cluster_vip3:    "%{hiera('netcfg_public_netpart')}.8"
corosync_cluster_vip4:    "%{hiera('netcfg_public_netpart')}.9"
corosync_cluster_vip5:    "%{hiera('netcfg_public_netpart')}.10"

# Firewall rules full access to everything!
profile::firewall::rules::custom_rules:
  '451 haproxy http':
    proto:        'tcp'
    dport:        [ '80', '443' ]
    source:       '0.0.0.0/0'
  '452 haproxy ldap':
    proto:        'tcp'
    dport:        [ '636', '389' ]
    source:       '0.0.0.0/0'
  '455 haproxy status':
    proto:        'tcp'
    dport:        ['9000']
    source:       '0.0.0.0/0'

# HAproxy
haproxy::global_options:
  log:          '127.0.0.1 local6 debug alert'
  maxconn:      '10000' # total connections per core

haproxy::defaults_options:
  log:          'global'
  stats:        []
  option:       ['dontlognull', 'httplog', 'http-server-close', 'redispatch']
  maxconn:      '2000' # default per frontend
  timeout:
    - 'connect 10s'
    - 'http-keep-alive 10s'
    - 'check 10s'
    - 'http-request 10s'
    - 'client 30s'
    - 'server 30s'
    - 'queue 30s'

# Allow ports in selinux|
profile::base::selinux::ports:
  sfb-https:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     4443
  ldaps:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     636
  ldap:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     389

# Access lists
profile::highavailability::loadbalancing::haproxy::access_list:
  uib_vpn_net:
    ips:
      - 129.177.138.114/32 # uib-guest
      - 129.177.44.0/24 # vpn-gw
      - 129.177.46.0/24 # vpn-gw
      - 129.177.32.0/24 # vpn-ansatt
      - 129.177.33.0/24 # vpn-ansatt
      - 129.177.48.0/24 # vpn-student
      - 129.177.49.0/24 # vpn-student

profile::highavailability::loadbalancing::haproxy::haproxy_mapfile:
  uib_https_domains:
    ensure: present
    mappings:
      - 'exch.uib.no':                            'uib-https-exch'
      - 'portal.uib.no':                          'uib-https-adm'
  uib_http_domains:
    ensure: present
    mappings:
      - 'portal.uib.no':                          'uib-http-adm'
  public_https_domains:
    ensure: present
    mappings:
      - 'report.uh-iaas.no':                      'public-https-uh-report'
      - 'status.uh-iaas.no':                      'public-https-uh-status'
  public_http_domains:
    ensure: present
    mappings:
      - 'report.uh-iaas.no':                      'public-https-uh-report'
      - 'status.uh-iaas.no':                      'public-https-uh-status'
  uib_grid_domains:
    ensure: present
    mappings: []

profile::highavailability::loadbalancing::haproxy::haproxy_balancermembers:
  'public-https-uh-status':
    listening_service:  'public-https-uh-status'
    ports:              443
    server_names:       ['status-osl', 'status-bgo']
    ipaddresses:        ['158.37.63.250', '158.39.77.250']
    options:            'verify none inter 1000 check check-ssl'
  'public-https-uh-report':
    listening_service:  'public-https-uh-report'
    ports:              443
    server_names:       ['report-osl', 'report-bgo']
    ipaddresses:        ['158.37.63.250', '158.39.77.250']
    options:            'verify none inter 1000 check check-ssl'
  'public-https-apps':
    listening_service:  'public-https-apps'
    ports:              443
    server_names:       ['appsanywhere01.uib.no', 'appsanywhere02.uib.no']
    ipaddresses:        ['129.177.30.211', '129.177.30.229']
    options:
      - 'check'
  'uib-https-apps-gw':
    listening_service:  'uib-https-apps-gw'
    ports:              443
    server_names:       ['apps-gw01.uib.no', 'apps-gw02.uib.no']
    ipaddresses:        ['129.177.14.98', '129.177.14.152']
    define_cookies:     true
    options:
      - 'check'
  'uib-https-apps-admin':
    listening_service:  'uib-https-apps-admin'
    ports:              443
    server_names:       ['apps-admin01.uib.no', 'apps-admin02.uib.no']
    ipaddresses:        ['129.177.14.170', '129.177.14.171']
    options:
      - 'check'
#   'public-ldap-prod':
#     listening_service:  'public-ldap-prod'
#     ports:              '389'
#     server_names:       ['p1ldap01.uib.no', 'p2ldap01.uib.no', 'p1ldap02.uib.no', 'p2ldap02.uib.no']
#     ipaddresses:        ['129.177.5.229', '129.177.5.230', '129.177.5.234', '129.177.5.236']
#     options:
#       - 'check'
#   'public-ldaps-prod':
#     listening_service:  'public-ldaps-prod'
#     ports:              '636'
#     server_names:       ['p1ldap01.uib.no', 'p2ldap01.uib.no', 'p1ldap02.uib.no', 'p2ldap02.uib.no']
#     ipaddresses:        ['129.177.5.229', '129.177.5.230', '129.177.5.234', '129.177.5.236']
#     options:
#       - 'check'
#   'uib-https-exch':
#     listening_service:  'uib-https-exch'
#     ports:              443
#     server_names:       ['exchange01.uib.no', 'exchange02.uib.no']
#     ipaddresses:        ['129.177.14.178','129.177.14.179']
#     options:            'check'
#   'uib-https-adm':
#     listening_service:  'uib-https-adm'
#     ports:              443
#     server_names:       ['rd-web01.uib.no', 'rd-web02.uib.no']
#     ipaddresses:        ['129.177.14.13', '129.177.14.182']
#     options:
#       - 'check'
#   'uib-http-adm':
#     listening_service:  'uib-http-adm'
#     ports:              80
#     server_names:       ['rd-web01.uib.no', 'rd-web02.uib.no']
#     ipaddresses:        ['129.177.14.13', '129.177.14.182']
#     options:
#       - 'check'
#   'uib-ldap-test':
#     listening_service:  'uib-ldap-test'
#     ports:              '389'
#     server_names:       ['t1ldap01.uib.no']
#     ipaddresses:        ['129.177.5.183']
#     options:
#       - 'check'
#   'uib-ldaps-test':
#     listening_service:  'uib-ldaps-test'
#     ports:              '636'
#     server_names:       ['t1ldap01.uib.no']
#     ipaddresses:        ['129.177.5.183']
#     options:
#       - 'check'
#
profile::highavailability::loadbalancing::haproxy::haproxy_backends:
  public-http-apps:
    mode:             'tcp'
    options:
      - balance:      'source'
      - option:
        - 'forwardfor except 127.0.0.1'
      # - option:
      #   - 'httpchk HEAD /jukeboxserver/do/license/token/renew.tok?msid=ping HTTP/1.1\r\nHost:\ apps-admin.uib.no'
  public-http-uh-status:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  public-https-uh-status:
    mode:             'tcp'
    options:
      - balance:      'source'
      - option:
        - 'httpchk HEAD /api/health HTTP/1.1\r\nHost:\ status.uh-iaas.no'
  public-http-uh-report:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - redirect:     'scheme https if !{ ssl_fc }'
  public-https-uh-report:
    mode:             'tcp'
    options:
      - balance:      'source'
      - acl:          'instance-api url_beg /api/v1/instance'
      - tcp-request:  'content reject if instance-api'
      #- tcp-request:  'content reject if !{ src -f /etc/haproxy/uhiaas-report.list }'
      - option:
        - 'httpchk HEAD /health HTTP/1.1\r\nHost:\ report.uh-iaas.no'
  public-ldap-prod:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
  public-ldaps-prod:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
  uib-https-sfb:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      - option:
        - 'httpchk /healthcheck.html'
  uib-http-sfb:
    mode:             'http'
    options:
      - balance:      'roundrobin'
      - option:
        - 'httpchk /healthcheck.html'
  uib-https-exch:
    mode:             'tcp'
    options:
      - balance:      'source'
  uib-https-adm:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      - tcp-request:  'content reject if { src -f /etc/haproxy/uib_vpn_net.list }'
  uib-http-adm:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      - tcp-request:  'content reject if { src -f /etc/haproxy/uib_vpn_net.list }'
  uib-ldap-test:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
  uib-ldaps-test:
    mode:             'tcp'
    options:
      - balance:      'leastconn'
  uib-https-apps-admin:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      # - option:
      #   - 'httpchk HEAD /jukeboxserver/do/license/token/renew.tok?msid=ping HTTP/1.1\r\nHost:\ apps-admin.uib.no'
  uib-https-apps-gw:
    mode:             'tcp'
    options:
      - balance:      'roundrobin'
      - cookie:       'ASP.NET_SessionId prefix nocache'
      # - option:
      #   - 'httpchk HEAD /jukeboxserver/do/license/token/renew.tok?msid=ping HTTP/1.1\r\nHost:\ apps-admin.uib.no'

#  uib-https-uh-dashboard:
#    mode: 'tcp'
#    options:
#      - balance:      'source'
#      - option:       ['ssl-hello-chk']
#      - stick-table:  'type binary len 32 size 30k expire 30m'
#      - acl:
#        - 'clienthello req_ssl_hello_type 1'
#        - 'serverhello rep_ssl_hello_type 2'
#      - tcp-request:
#        - 'inspect-delay 15s'
#        - 'content reject unless clienthello'
#      - tcp-response:
#        - 'content reject unless serverhello'
#      - stick:
#        - 'on payload_lv(43,1) if clienthello'
#        - 'store-response payload_lv(43,1) if serverhello'

profile::highavailability::loadbalancing::haproxy::haproxy_frontends:
  public-http:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip1')}:80": []
      "%{hiera('corosync_cluster_vip2')}:80": []
    options:
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/public_http_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  public-https:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip1')}:443": []
      "%{hiera('corosync_cluster_vip2')}:443": []
    options:
      - option:         'tcplog'
      - tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if { req_ssl_hello_type 1 }'
      - use_backend:      '%[req_ssl_sni,lower,map(/etc/haproxy/public_https_domains.map)]'
  public-ldap:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip1')}:389": []
      "%{hiera('corosync_cluster_vip2')}:389": []
    options:
      - option:         'tcplog'
      - use_backend:    'public-ldap-prod'
  public-ldaps:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip1')}:636": []
      "%{hiera('corosync_cluster_vip2')}:636": []
    options:
      - option:         'tcplog'
      - use_backend:    'public-ldaps-prod'
  uib-http:
    mode:               'http'
    bind:
      "%{hiera('corosync_cluster_vip3')}:80": []
      "%{hiera('corosync_cluster_vip4')}:80": []
    options:
      - maxconn:        '16000' # max internal http connections
      - option:         'httplog'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/uib_http_domains.map)]'
      - capture:        'request header Host len 32' #for debug
  uib-https:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip3')}:443": []
      "%{hiera('corosync_cluster_vip4')}:443": []
    options:
      - maxconn:        '16000' # max internal https connections
      - option:         'tcplog'
      - tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if { req_ssl_hello_type 1 }'
      - use_backend:      '%[req_ssl_sni,lower,map(/etc/haproxy/uib_https_domains.map)]'
  uib-ldap:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip3')}:389": []
      "%{hiera('corosync_cluster_vip4')}:389": []
    options:
      - option:         'tcplog'
      - use_backend:    'uib-ldap-test'
  uib-ldaps:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip3')}:636": []
      "%{hiera('corosync_cluster_vip4')}:636": []
    options:
      - option:         'tcplog'
      - use_backend:    'uib-ldaps-test'
  uib-grid-https:
    mode:               'tcp'
    bind:
      "%{hiera('corosync_cluster_vip5')}:443": []
    options:
      - maxconn:        '5000' # max grid https connections
      - timeout:
        - 'connect 5s'
        - 'client 50s'
        - 'server 50s'
      - option:         'tcplog'
      - tcp-request:
        - 'inspect-delay 5s'
        - 'content accept if { req_ssl_hello_type 1 }'
      - use_backend:      '%[req_ssl_sni,lower,map(/etc/haproxy/uib_grid_domains.map)]'


# Corosync uib
# Corosync VIP and HAproxy
profile::highavailability::corosync::primitives:
  'pubip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip1')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'pubip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip2')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'uibip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip3')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'uibip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip4')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'gridip':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip5')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { "interval": "10s", "timeout": "20s" }
      'start':            { "interval": "0s", "timeout": "20s" }
      'stop':             { "interval": "0s", "timeout": "20s" }
  'haproxy':
    'primitive_class':    'systemd'
    'primitive_type':     'haproxy'
    'operations':
      'monitor':          { 'interval': '5s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }

profile::highavailability::corosync::locations:
  'pubip_location1':
    primitive:  'pubip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'pubip_location2':
    primitive:  'pubip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'
  'uibip_location1':
    primitive:  'uibip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'uibip_location2':
    primitive:  'uibip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'
  'grid_location1':
    primitive:  'gridip'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      '100'
  'grid_location2':
    primitive:  'gridip'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      '50'

profile::highavailability::corosync::colocations:
  'pubip1_haproxy':
    primitives:   ['clone_haproxy', 'pubip1']
  'pubip2_haproxy':
    primitives:   ['clone_haproxy', 'pubip2']
  'uibip1_haproxy':
    primitives:   ['clone_haproxy', 'uibip1']
  'uibip2_haproxy':
    primitives:   ['clone_haproxy', 'uibip2']
  'gridip_haproxy':
    primitives:   ['clone_haproxy', 'gridip']
