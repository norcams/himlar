---
include:
  default:
    - profile::highavailability::loadbalancing::haproxy
    - profile::logging::rsyslog::client

# FIXME Temp hack to block access to test01, all others will allow all connections
block_api_connection:   'connection accept'

profile::base::common::packages:
  'bash-completion': {}
  'bash-completion-extras': {}
  'jq': {}

# Sensu
profile::monitoring::sensu::agent::plugins:
  sensu-plugins-haproxy:
    type:         package
    pkg_version:  '1.4.0'

profile::monitoring::sensu::agent::checks:
  'metrics-haproxy-overview':
    type:         'metric'
    command:      "metrics-haproxy.rb --scheme haproxy.%{::hostname} --server-metrics -c 127.0.0.1 -P 9000"
    interval:     60
    subscribers:  ['metrics']
    handlers:     ['graphite_tcp']

profile::base::selinux::manage_selinux:                             true
profile::base::network::manage_dummy:                               true
profile::highavailability::loadbalancing::haproxy::manage_haproxy:  true
profile::highavailability::loadbalancing::haproxy::manage_firewall: true
profile::highavailability::loadbalancing::haproxy::firewall_ports:
  public:    ['5000', '8041', '8774', '8776', '9292', '9696', '6082', '8080', '8778', '9001']
  internal:  ['5000', '8041', '8774', '8776', '9292', '9696', '35357', '8080', '8778', '9001']
  mgmt:      ['9000']
  limited:   ['80', '443']

# HAproxy
star_api_ssl_pem: "star.api.%{hiera('domain_public')}.pem"
api_ssl_pem:      "api.%{hiera('domain_public')}.pem"
status_ssl_pem:   "status.%{hiera('domain_public')}.pem"
console_ssl_pem:  "console.%{hiera('domain_public')}.pem"

haproxy::defaults_options:
  mode:         'http'
  option:       [ 'redispatch', 'forwardfor', 'http-server-close', 'httplog', 'dontlognull']
  balance:      'source'
  retries:      '3'
  maxconn:      '2000' # per frontend
  timeout:
    - 'http-request 10s'
    - 'connect 10s'
    - 'check 10s'
    - 'client 1m'
    - 'server 3m'
    - 'queue 1m'

# Access lists
profile::highavailability::loadbalancing::haproxy::access_list:
  testing_network:
    ips:  "%{alias('allow_from_testing_network')}"

# Domain mapping to backend
profile::highavailability::loadbalancing::haproxy::haproxy_mapfile:
  public_domains:
    ensure: present
    mappings:
      - "api.%{hiera('domain_frontend')}:5000":             'bk_identity'
      - "identity.api.%{hiera('domain_public')}:5000":      'bk_identity'
      - "network.api.%{hiera('domain_public')}:9696":       'bk_network'
      - "metric.api.%{hiera('domain_public')}:8041":        'bk_metric'
      - "compute.api.%{hiera('domain_public')}:8774":       'bk_compute'
      - "placement.api.%{hiera('domain_public')}:8778":     'bk_placement'
      - "volume.api.%{hiera('domain_public')}:8776":        'bk_volume'
      - "image.api.%{hiera('domain_public')}:9292":         'bk_image'
      - "object.api.%{hiera('domain_public')}:8080":        'bk_object'
      - "dns.api.%{hiera('domain_public')}:9001":           'bk_dns'
      - "status.%{hiera('domain_frontend')}":               'bk_status'
      - "status-%{::location}.%{hiera('domain_frontend')}": 'bk_status'
      - "request.%{hiera('domain_frontend')}":              'bk_request'
      - "console.%{hiera('domain_public')}:6082":           'bk_console'
      - "access.%{hiera('domain_frontend')}":               'bk_access'
      - "access-%{::location}.%{hiera('domain_frontend')}": 'bk_access'
      - "report.%{hiera('domain_frontend')}":               'bk_report'
      - "report-%{::location}.%{hiera('domain_frontend')}": 'bk_report'
  internal_domains:
    ensure: present
    mappings:
      - "identity.%{hiera('domain_trp')}:5000":         'bk_identity'
      - "identity.%{hiera('domain_trp')}:35357":        'bk_identity'
      - "network.%{hiera('domain_trp')}:9696":          'bk_network'
      - "metric.%{hiera('domain_trp')}:8041":           'bk_metric'
      - "compute.%{hiera('domain_trp')}:8774":          'bk_compute'
      - "placement.%{hiera('domain_trp')}:8778":        'bk_placement'
      - "volume.%{hiera('domain_trp')}:8776":           'bk_volume'
      - "image.%{hiera('domain_trp')}:9292":            'bk_image'
      - "dns.%{hiera('domain_trp')}:9001":              'bk_dns'
      - "object.%{hiera('domain_trp')}:8080":           'bk_object'

# HAproxy backends: public, internal and haproxy monitor
profile::highavailability::loadbalancing::haproxy::haproxy_frontends:
  frontend_public:
    bind:
      "%{::ipaddress_public1}:5000":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}", 'crt', "%{hiera('api_ssl_pem')}"]
      "%{::ipaddress_public1}:8041":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}"]
      "%{::ipaddress_public1}:8080":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}"]
      "%{::ipaddress_public1}:8778":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}"]
      "%{::ipaddress_public1}:8774":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}"]
      "%{::ipaddress_public1}:8776":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}"]
      "%{::ipaddress_public1}:9292":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}"]
      "%{::ipaddress_public1}:9696":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}"]
      "%{::ipaddress_public1}:9001":  ['ssl', 'crt', "%{hiera('star_api_ssl_pem')}"]
      "%{::ipaddress_public1}:443":   ['ssl', 'crt', "%{hiera('status_ssl_pem')}"]
      "%{::ipaddress_public1}:80":    []
      "%{::ipaddress_public1}:6082":  ['ssl', 'crt', "%{hiera('console_ssl_pem')}"]
    options:
      - capture:        'request header Host len 64' #for debug
      - http-request:
        - 'add-header X-Forwarded-Proto https if { ssl_fc }'
        - 'set-header X-Forwarded-Port %[dst_port]'
      - acl:            'is_request hdr_beg(host) -i request'
      - redirect:       'scheme https if !{ ssl_fc } !is_request' # redirect all to https (only port 80)
      - tcp-request:    "%{hiera('block_api_connection')}" # should only block in test01
      # Uncomment this to restrict access to testing network only
      #- use_backend:    'bk_maintenance unless { src -f /etc/haproxy/testing_network.list }'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/public_domains.map)]'
  frontend_internal:
    bind:
      "%{::ipaddress_trp1}:35357": [] # keystone-admin
      "%{::ipaddress_trp1}:5000":  [] # keystone
      "%{::ipaddress_trp1}:8041":  [] # metric
      "%{::ipaddress_trp1}:8774":  [] # compute
      "%{::ipaddress_trp1}:8776":  [] # volume
      "%{::ipaddress_trp1}:9292":  [] # image
      "%{::ipaddress_trp1}:9696":  [] # neutron
      "%{::ipaddress_trp1}:8080":  [] # object
      "%{::ipaddress_trp1}:9001":  [] # designate
      "%{::ipaddress_trp1}:8778":  [] # placement
    options:
      - capture:        'request header Host len 64' #for debug
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/internal_domains.map)]'
  frontend_monitor:
    options:
      stats:
         - 'enable'
         - 'hide-version'
         - 'realm Sensu\ Monitor\ Stats'
         - 'uri /'
    bind:
      '%{::ipaddress_mgmt1}:9000':            []
      '127.0.0.1:9000':                       []

# HAproxy backend, one for each API and one for status
profile::highavailability::loadbalancing::haproxy::haproxy_backends:
  bk_identity:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_network:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      - balance:      'roundrobin'
  bk_compute:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      - balance:      'roundrobin'
  bk_placement:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      - balance:      'roundrobin'
  bk_volume:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_image:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_metric:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_dns:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      - balance:      'roundrobin'
  bk_object:
    options:
      - option:
        - 'httplog'
        - 'httpchk /healthcheck'
  bk_status:
    options:
      - option:       'httplog'
  bk_console:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_access:
    options:
      - option:       'httplog'
  bk_report:
    options:
      - option:       'httplog'
  bk_request:
    options:
      redirect:         'location https://skjema.uio.no/iaas-project'
  bk_maintenance:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.maintenance.http'

# Servers for backends. This will be merged and can should be overridden i location
profile::highavailability::loadbalancing::haproxy::haproxy_balancermembers:
  identity:
    listening_service:  'bk_identity'
    server_names:       #['%{::location}-identity-01']
      - "%{::location}-identity-01"
      - "%{::location}-identity-02"
      - "%{::location}-identity-03"
    ipaddresses:        #["%{hiera('netcfg_trp_netpart')}.81"]
      - "%{hiera('netcfg_trp_netpart')}.81"
      - "%{hiera('netcfg_trp_netpart')}.82"
      - "%{hiera('netcfg_trp_netpart')}.83"
    ports:              '5000'
    options:            'check'
  network:
    listening_service:  'bk_network'
    server_names:       ['%{::location}-network-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.71"]
    ports:              '9696'
    options:            'check'
  metric:
    listening_service:  'bk_metric'
    server_names:       ['%{::location}-metric-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.96"]
    ports:              '8041'
    options:            'check'
  compute:
    listening_service:  'bk_compute'
    server_names:       ['%{::location}-novactrl-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.66"]
    ports:              '8774'
    options:            'check'
  placement:
    listening_service:  'bk_placement'
    server_names:       ['%{::location}-novactrl-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.66"]
    ports:              '8778'
    options:            'check'
  volume:
    listening_service:  'bk_volume'
    server_names:
      - "%{::location}-volume-01"
      - "%{::location}-volume-02"
    ipaddresses:
      - "%{hiera('netcfg_trp_netpart')}.46"
      - "%{hiera('netcfg_trp_netpart')}.47"
    ports:              '8776'
    options:            'check'
  image:
    listening_service:  'bk_image'
    server_names:       ['%{::location}-image-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.36"]
    ports:              '9292'
    options:            'check'
  object:
    listening_service:  'bk_object'
    server_names:
      - '%{::location}-object-01'
      - '%{::location}-object-02'
      - '%{::location}-object-03'
      - '%{::location}-object-04'
      - '%{::location}-object-05'
    ipaddresses:
      - "%{hiera('netcfg_trp_netpart')}.119"
      - "%{hiera('netcfg_trp_netpart')}.120"
      - "%{hiera('netcfg_trp_netpart')}.121"
      - "%{hiera('netcfg_trp_netpart')}.122"
      - "%{hiera('netcfg_trp_netpart')}.123"
    ports:              '8080'
    options:            'check'
  status:
    listening_service:  'bk_status'
    server_names:       ['%{::location}-status-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.21"]
    ports:              '8080'
    options:            'check'
  dns:
    listening_service:  'bk_dns'
    server_names:       ['%{::location}-dns-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.34"]
    ports:              '9001'
    options:            'check'
  console:
    listening_service:  'bk_console'
    server_names:       ['%{::location}-console-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.61"]
    ports:              '6082'
    options:            'check'
  access:
    listening_service:  'bk_access'
    server_names:       ['%{::location}-access-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.56"]
    ports:              '80'
    options:            'check'
  report:
    listening_service:  'bk_report'
    server_names:       ['%{::location}-report-01']
    ipaddresses:        ["%{hiera('netcfg_trp_netpart')}.22"]
    ports:              '80'
    options:            'check'

# SELinux - open ports for HAproxy
profile::base::selinux::ports:
  identity-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     5000
  network-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     9696
  metric-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8041
  compute-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8774
  volume-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8776
  image-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     9292
  status-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8080
  placement-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8778
  console-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     6082
  dns-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     9001

# Errorpage for api, not used for status!
profile::highavailability::loadbalancing::haproxy::haproxy_errorpage:
  'maintenance':
    code:     503
    header:   'Scheduled maintenance'
    content:  'Unavailable due to scheduled maintenance. Be right back.'
    url:      'https://twitter.com/uhiaas'
  'api':
    code:     503
    header:   'Be Right Back'
    content:  'The API are down at the moment'
    url:      "https://status.%{hiera('domain_frontend')}"
  'console':
    code:     503
    header:   'Be Right Back'
    content:  'The console is down at the moment'
    url:      "https://console.%{hiera('domain_frontend')}"
