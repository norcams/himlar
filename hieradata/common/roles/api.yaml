---
include:
  default:
    - profile::highavailability::loadbalancing::haproxy
    - profile::logging::rsyslog::client

named_interfaces::config:
  mgmt:
    - eth0
  trp:
    - eth1
  public:
    - dummy0

# FIXME Temp hack to block access to test01, all others will allow all connections
block_api_connection:   'connection accept'

profile::base::common::packages:
  'bash-completion': {}
  'bash-completion-extras': {}
  'netcat': {}

# FIXME:sensu-go
profile::monitoring::sensu::agent::enable_go_agent:   true
profile::monitoring::sensu::agent::enable_agent:      false

# sensu
sensu::agent::subscriptions:
  - 'base'
  - 'nodes'
  - 'metrics'

profile::base::selinux::manage_selinux:                             true
profile::network::interface::manage_dummy:                          true
profile::highavailability::loadbalancing::haproxy::manage_haproxy:  true
profile::highavailability::loadbalancing::haproxy::manage_firewall: true
profile::highavailability::loadbalancing::haproxy::firewall_ports:
  public:    ['80', '443', '5000', '8041', '8774', '8776', '9292', '9696', '6080', '8080', '8778', '9001']
  internal:  ['5000', '8041', '8774', '8776', '9292', '9696', '35357', '8080', '8778', '9001']
  mgmt:      ['9000']
  limited:   []

profile::highavailability::loadbalancing::haproxy::anycast_service_ip:  "%{hiera('public__ip__api')}"
profile::highavailability::loadbalancing::haproxy::anycast_service_ip6: "%{hiera('public__ipv6__api')}"

# HAproxy
star_api_ssl_pem:         "star.api.%{hiera('domain_public')}.pem"
star_api_ssl_pem2:        "star.api.%{hiera('domain_public2')}.pem"
console_ssl_pem:          "console.%{hiera('domain_public')}.pem"
console_ssl_pem2:         "console.%{hiera('domain_public2')}.pem"
frontend_star_ssl_pem:    "star.%{hiera('domain_public')}.pem"
frontend_star_ssl_pem2:   "star.%{hiera('domain_public2')}.pem"

haproxy::defaults_options:
  mode:         'http'
  option:       [ 'redispatch', 'forwardfor', 'http-server-close', 'httplog', 'dontlognull']
  balance:      'source'
  retries:      '3'
  maxconn:      '2000' # per frontend
  timeout:
    - 'http-request 10s'
    - 'connect 10s'
    - 'check 10s'
    - 'client 1m'
    - 'server 3m'
    - 'queue 1m'

# Access lists
profile::highavailability::loadbalancing::haproxy::access_list:
  testing_network:
    ips:  "%{alias('allow_from_testing_network')}"

# Domain mapping to backend
profile::highavailability::loadbalancing::haproxy::haproxy_mapfile:
  public_domains:
    ensure: present
    mappings:
      - "dashboard.%{hiera('domain_frontend2')}":           'bk_dashboard'
      - "api.%{hiera('domain_frontend')}:5000":             'bk_identity'
      - "api.%{hiera('domain_frontend2')}:5000":            'bk_identity'
      - "identity.api.%{hiera('domain_public')}:5000":      'bk_identity'
      - "network.api.%{hiera('domain_public')}:9696":       'bk_network'
      - "metric.api.%{hiera('domain_public')}:8041":        'bk_metric'
      - "compute.api.%{hiera('domain_public')}:8774":       'bk_compute'
      - "placement.api.%{hiera('domain_public')}:8778":     'bk_placement'
      - "volume.api.%{hiera('domain_public')}:8776":        'bk_volume'
      - "image.api.%{hiera('domain_public')}:9292":         'bk_image'
      - "object.api.%{hiera('domain_public')}:8080":        'bk_object'
      - "dns.api.%{hiera('domain_public')}:9001":           'bk_dns'
      - "status.%{hiera('domain_frontend')}":               'bk_status'
      - "status-%{::location}.%{hiera('domain_frontend')}": 'bk_status'
      - "request.%{hiera('domain_frontend')}":              'bk_request'
      - "console.%{hiera('domain_public')}:6080":           'bk_console'
      - "access.%{hiera('domain_frontend')}":               'bk_access'
      - "access-%{::location}.%{hiera('domain_frontend')}": 'bk_access'
      - "report.%{hiera('domain_frontend')}":               'bk_report'
      - "report-%{::location}.%{hiera('domain_frontend')}": 'bk_report'
      - "identity.api.%{hiera('domain_public2')}:5000":     'bk_identity'
      - "network.api.%{hiera('domain_public2')}:9696":      'bk_network'
      - "metric.api.%{hiera('domain_public2')}:8041":       'bk_metric'
      - "compute.api.%{hiera('domain_public2')}:8774":      'bk_compute'
      - "placement.api.%{hiera('domain_public2')}:8778":    'bk_placement'
      - "volume.api.%{hiera('domain_public2')}:8776":       'bk_volume'
      - "image.api.%{hiera('domain_public2')}:9292":        'bk_image'
      - "object.api.%{hiera('domain_public2')}:8080":       'bk_object'
      - "dns.api.%{hiera('domain_public2')}:9001":          'bk_dns'
      - "status.%{hiera('domain_frontend2')}":              'bk_status'
      - "status-%{::location}.%{hiera('domain_frontend2')}": 'bk_status'
      - "request.%{hiera('domain_frontend2')}":             'bk_request'
      - "console.%{hiera('domain_public2')}:6080":          'bk_console'
      - "access.%{hiera('domain_frontend2')}":              'bk_access'
      - "access-%{::location}.%{hiera('domain_frontend2')}": 'bk_access'
      - "report.%{hiera('domain_frontend2')}":              'bk_report'
      - "report-%{::location}.%{hiera('domain_frontend2')}": 'bk_report'
      - "www.%{hiera('domain_frontend2')}":                 'bk_www'
  internal_domains:
    ensure: present
    mappings:
      - "identity.%{hiera('domain_trp')}:5000":         'bk_identity'
      - "identity.%{hiera('domain_trp')}:35357":        'bk_identity'
      - "network.%{hiera('domain_trp')}:9696":          'bk_network'
      - "metric.%{hiera('domain_trp')}:8041":           'bk_metric'
      - "compute.%{hiera('domain_trp')}:8774":          'bk_compute'
      - "placement.%{hiera('domain_trp')}:8778":        'bk_placement'
      - "volume.%{hiera('domain_trp')}:8776":           'bk_volume'
      - "image.%{hiera('domain_trp')}:9292":            'bk_image'
      - "dns.%{hiera('domain_trp')}:9001":              'bk_dns'
      - "object.%{hiera('domain_trp')}:8080":           'bk_object'

# HAproxy backends: public, internal and haproxy monitor
profile::highavailability::loadbalancing::haproxy::haproxy_frontends:
  frontend_public:
    bind:
      "%{::ipaddress_public1}:5000":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}", "crt %{hiera('frontend_star_ssl_pem')}", "crt %{hiera('frontend_star_ssl_pem2')}"]
      "%{::ipaddress_public1}:8041":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}"]
      "%{::ipaddress_public1}:8080":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}"]
      "%{::ipaddress_public1}:8778":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}"]
      "%{::ipaddress_public1}:8774":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}"]
      "%{::ipaddress_public1}:8776":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}"]
      "%{::ipaddress_public1}:9292":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}"]
      "%{::ipaddress_public1}:9696":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}"]
      "%{::ipaddress_public1}:9001":  ['ssl', "crt %{hiera('star_api_ssl_pem')}", "crt %{hiera('star_api_ssl_pem2')}"]
      "%{::ipaddress_public1}:443":   ['ssl', "crt %{hiera('frontend_star_ssl_pem')}", "crt %{hiera('frontend_star_ssl_pem2')}"]
      "%{::ipaddress_public1}:80":    []
      "%{::ipaddress_public1}:6080":  ['ssl', "crt %{hiera('console_ssl_pem')}", "crt %{hiera('console_ssl_pem2')}"]
    options:
      - capture:        'request header Host len 64' #for debug
      - acl:
        - 'keystone_admin_endpoint path -i -m beg /v3/projects'
        - 'keystone_admin_endpoint path -i -m beg /v3/groups'
        - 'keystone_admin_endpoint path -i -m beg /v3/domains'
        - 'keystone_admin_endpoint path -i -m beg /v3/regions'
        - 'keystone_admin_endpoint path -i -m beg /v3/roles'
        - 'keystone_admin_endpoint path -i -m beg /v3/endpoints'
        - 'keystone_admin_endpoint path -i -m beg /v3/services'
        - 'keystone_admin_endpoint path -i -m beg /v3/system'
        - 'valid_method method GET HEAD OPTION'
        - 'is_request hdr_beg(host) -i request'
        - 'has_subdomain hdr_reg(host) -i .*\..*\..*'
      - redirect:
        - 'code 301 location https://www.%[hdr(host)] if !has_subdomain'
        - 'scheme https if !{ ssl_fc } !is_request' # redirect all to https (only port 80)
      - tcp-request:    "%{hiera('block_api_connection')}" # should only block in test01
      # Uncomment this to restrict access to testing network only
      #- use_backend:    'bk_maintenance unless { src -f /etc/haproxy/testing_network.list }'
      #
      - http-request:
        - 'add-header X-Forwarded-Proto https if { ssl_fc }'
        - 'set-header X-Forwarded-Port %[dst_port]'
        # Returns 403 for all keystone admin endpoints on port 5000
        # using http methods not whitelisted (e.g. POST, PATCH, DELETE)
        - 'deny if { dst_port 5000 } !valid_method keystone_admin_endpoint'
      #  - 'set-header X-Forwarded-Host %[req.hdr(Host)]'
      - errorfile:      '403 /etc/haproxy/error.forbidden.http'
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/public_domains.map)]'
  frontend_internal:
    bind:
      "%{::ipaddress_trp1}:35357": [] # keystone-admin
      "%{::ipaddress_trp1}:5000":  [] # keystone
      "%{::ipaddress_trp1}:8041":  [] # metric
      "%{::ipaddress_trp1}:8774":  [] # compute
      "%{::ipaddress_trp1}:8776":  [] # volume
      "%{::ipaddress_trp1}:9292":  [] # image
      "%{::ipaddress_trp1}:9696":  [] # neutron
      "%{::ipaddress_trp1}:8080":  [] # object
      "%{::ipaddress_trp1}:9001":  [] # designate
      "%{::ipaddress_trp1}:8778":  [] # placement
    options:
      - capture:        'request header Host len 64' #for debug
      - use_backend:    '%[req.hdr(host),lower,map(/etc/haproxy/internal_domains.map)]'
  frontend_monitor:
    options:
      stats:
         - 'enable'
         - 'hide-version'
         - 'realm Sensu\ Monitor\ Stats'
         - 'uri /'
    bind:
      '%{::ipaddress_mgmt1}:9000':            []
      '127.0.0.1:9000':                       []

# HAproxy backend, one for each API and one for status
profile::highavailability::loadbalancing::haproxy::haproxy_backends:
  # this will redirect domain_frontend2 to domain_frontend
  bk_dashboard:
    mode:             'http'
    options:
      - redirect:     "code 301 location https://dashboard.%{hiera('domain_frontend')}"
  bk_www:
    mode:             'http'
    options:
      - fullconn:     200
      - redirect:     "code 301 location https://www.%{hiera('domain_frontend')}"
  bk_identity:
    options:
      - fullconn:     1000
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_network:
    options:
      - fullconn:     1000
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      - balance:      'roundrobin'
  bk_compute:
    options:
      - fullconn:     500
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      #- balance:      'roundrobin'
  bk_placement:
    options:
      - fullconn:     500
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      #- balance:      'roundrobin'
  bk_volume:
    options:
      - fullconn:     200
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_image:
    options:
      - fullconn:     200
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      - balance:      'roundrobin'
  bk_metric:
    options:
      - fullconn:     500
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_dns:
    options:
      - fullconn:     100
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      - balance:      'roundrobin'
  bk_object:
    options:
      - fullconn:     500
      - option:
        - 'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
      - balance:      'roundrobin'
  bk_status:
    options:
      - fullconn:     200
      - option:       'httplog'
  bk_console:
    options:
      - fullconn:     200
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.api.http'
  bk_access:
    options:
      - fullconn:     200
      - option:       'httplog'
  bk_report:
    options:
      - fullconn:     200
      - option:       'httplog'
  bk_request:
    options:
      - fullconn:     200
      - redirect:         'location https://nettskjema.no/a/iaas-project'
  bk_maintenance:
    options:
      - option:       'httplog'
      - errorfile:    '503 /etc/haproxy/error.maintenance.http'

# Servers for backends. This will be merged and can should be overridden i location

# aliases
identity__backend__names:  ["%{::location}-identity-01"]
identity__backend__ips:    ["%{hiera('netcfg_trp_netpart')}.81"]
network__backend__names:   ['%{::location}-network-01']
network__backend__ips:     ["%{hiera('netcfg_trp_netpart')}.71"]
metric__backend__names:    ['%{::location}-metric-01']
metric__backend__ips:      ["%{hiera('netcfg_trp_netpart')}.96"]
compute__backend__names:   ['%{::location}-novactrl-01']
compute__backend__ips:     ["%{hiera('netcfg_trp_netpart')}.66"]
volume__backend__names:    ["%{::location}-volume-01"]
volume__backend__ips:      ["%{hiera('netcfg_trp_netpart')}.46"]
image__backend__names:     ['%{::location}-image-01']
image__backend__ips:       ["%{hiera('netcfg_trp_netpart')}.36"]
object__backend__names:    []
object__backend__ips:      []
status__backend__names:    ['%{::location}-status-01']
status__backend__ips:      ["%{hiera('netcfg_trp_netpart')}.50"]
dns__backend__names:       ['%{::location}-dns-01']
dns__backend__ips:         ["%{hiera('netcfg_trp_netpart')}.34"]
console__backend__names:   ['%{::location}-console-01']
console__backend__ips:     ["%{hiera('netcfg_trp_netpart')}.61"]
access__backend__names:    ['%{::location}-access-01']
access__backend__ips:      ["%{hiera('netcfg_trp_netpart')}.56"]
report__backend__names:    ['%{::location}-report-01']
report__backend__ips:      ["%{hiera('netcfg_trp_netpart')}.40"]

profile::highavailability::loadbalancing::haproxy::haproxy_balancermembers:
  identity:
    listening_service:  'bk_identity'
    server_names:       "%{alias('identity__backend__names')}"
    ipaddresses:        "%{alias('identity__backend__ips')}"
    ports:              '5000'
    options:            'check'
  network:
    listening_service:  'bk_network'
    server_names:       "%{alias('network__backend__names')}"
    ipaddresses:        "%{alias('network__backend__ips')}"
    ports:              '9696'
    options:            'check'
  metric:
    listening_service:  'bk_metric'
    server_names:       "%{alias('metric__backend__names')}"
    ipaddresses:        "%{alias('metric__backend__ips')}"
    ports:              '8041'
    options:            'check'
  compute:
    listening_service:  'bk_compute'
    server_names:       "%{alias('compute__backend__names')}"
    ipaddresses:        "%{alias('compute__backend__ips')}"
    ports:              '8774'
    options:            'check'
  placement:
    listening_service:  'bk_placement'
    server_names:       "%{alias('compute__backend__names')}"
    ipaddresses:        "%{alias('compute__backend__ips')}"
    ports:              '8778'
    options:            'check'
  volume:
    listening_service:  'bk_volume'
    server_names:       "%{alias('volume__backend__names')}"
    ipaddresses:        "%{alias('volume__backend__ips')}"
    ports:              '8776'
    options:            'check'
  image:
    listening_service:  'bk_image'
    server_names:       "%{alias('image__backend__names')}"
    ipaddresses:        "%{alias('image__backend__ips')}"
    ports:              '9292'
    options:            'check'
  object:
    listening_service:  'bk_object'
    server_names:       "%{alias('object__backend__names')}"
    ipaddresses:        "%{alias('object__backend__ips')}"
    ports:              '7480'
    options:            'check'
  status:
    listening_service:  'bk_status'
    server_names:       "%{alias('status__backend__names')}"
    ipaddresses:        "%{alias('status__backend__ips')}"
    ports:              '8080'
    options:            'check'
  dns:
    listening_service:  'bk_dns'
    server_names:       "%{alias('dns__backend__names')}"
    ipaddresses:        "%{alias('dns__backend__ips')}"
    ports:              '9001'
    options:            'check'
  console:
    listening_service:  'bk_console'
    server_names:       "%{alias('console__backend__names')}"
    ipaddresses:        "%{alias('console__backend__ips')}"
    ports:              '6080'
    options:            'check'
  access:
    listening_service:  'bk_access'
    server_names:       "%{alias('access__backend__names')}"
    ipaddresses:        "%{alias('access__backend__ips')}"
    ports:              '80'
    options:            'check'
  report:
    listening_service:  'bk_report'
    server_names:       "%{alias('report__backend__names')}"
    ipaddresses:        "%{alias('report__backend__ips')}"
    ports:              '80'
    options:            'check'

# SELinux - open ports for HAproxy
profile::base::selinux::ports:
  identity-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     5000
  object-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     7480
  network-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     9696
  metric-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8041
  compute-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8774
  volume-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8776
  image-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     9292
  status-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8080
  placement-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     8778
  console-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     6080
  dns-http:
    seltype:  'http_port_t'
    protocol: 'tcp'
    port:     9001

# Errorpage for api, not used for status!
profile::highavailability::loadbalancing::haproxy::haproxy_errorpage:
  'maintenance':
    code:     503
    header:   'Scheduled maintenance'
    content:  'Unavailable due to scheduled maintenance. Be right back.'
    url:      'https://twitter.com/nrec_no'
  'api':
    code:     503
    header:   'Be Right Back'
    content:  'The API are down at the moment'
    url:      "https://status.%{hiera('domain_frontend')}"
  'console':
    code:     503
    header:   'Be Right Back'
    content:  'The console is down at the moment'
    url:      "https://console.%{hiera('domain_frontend')}"
  'forbidden':
    code:     403
    message:  'Forbidden'
    content:  '{"error":{"code":403,"message":"Requested action require internal network access.","title":"Forbidden"}}'
    format:   'json'

profile::base::selinux::boolean:
  'cluster_use_execmem':
    ensure: 'on'
    persistent: true
