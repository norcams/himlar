---
include:
  default:
    - profile::highavailability::corosync
    - profile::highavailability::loadbalancing::haproxy
    - profile::firewall::rules

# SElinux are enforcing on this role!!
profile::base::selinux::manage_selinux: true

profile::base::common::packages:
  'nmap-ncat': {}
  'bash-completion': {}
  'bash-completion-extras': {}

#
# Firewall must be added in location or node section
#
profile::firewall::rules::manage_custom_rules:    true
profile::firewall::rules::custom_rules:           {}

#
# HAproxy
#
# HAproxy
haproxy::global_options:
  log:          '127.0.0.1 local6 debug alert'

haproxy::defaults_options:
  log:          'global'
  stats:        []
  option:       ['dontlognull']
  timeout:
    - 'connect 30s'
    - 'client 10s'
    - 'server 10s'

profile::highavailability::loadbalancing::haproxy::manage_haproxy:        true
profile::highavailability::loadbalancing::haproxy::enable_remote_logging: true
profile::highavailability::loadbalancing::haproxy::enable_nonlocal_bind:  true
profile::highavailability::loadbalancing::haproxy::haproxy_listens:
  monitor:
    mode: 'http'
    options:
      option: ['httplog']
      stats:
        - 'enable'
        - 'hide-version'
        - 'show-node'
        - 'realm Monitor\ Stats'
        - 'uri /'
    bind:
      '%{::ipaddress_mgmt1}:9000':              []
      '%{::ipaddress_public1}:9000':            []

#
# Corosync and pacemaker
#
profile::highavailability::corosync::manage_corosync: true
profile::highavailability::corosync::manage_firewall: true
# This should be overridden in nodes with opposite node ip
profile::highavailability::corosync::firewall_extras:
  source: "%{::network_mgmt1}/%{::netmask_mgmt1}"
profile::highavailability::corosync::properties:
  no-quorum-policy:
    value:  'ignore'
  stonith-enabled:
    value:  'false'
profile::highavailability::corosync::rsc_defaults:
  resource-stickiness:
    value:  '0'

profile::highavailability::corosync::primitives:
  'vip1':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip1')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'vip2':
    'primitive_class':    'ocf'
    'primitive_type':     'IPaddr2'
    'provided_by':        'heartbeat'
    'parameters':
      'ip':               "%{hiera('corosync_cluster_vip2')}"
      'cidr_netmask':     '24'
    operations:
      'monitor':          { 'interval': '10s', 'timeout': '20s' }
      'start':            { 'interval': '0s', 'timeout': '20s' }
      'stop':             { 'interval': '0s', 'timeout': '20s' }
  'haproxy':
    'primitive_class':    'systemd'
    'primitive_type':     'haproxy'
    'operations':
      'monitor':
        'interval':       '10s'
        'timeout':        '20s'
        'on-fail':        'standby' # set the node standby if this service fails

profile::highavailability::corosync::colocation:
  'vip1_haproxy':
    primitives:   ['clone_haproxy', 'vip1']
  'vip2_haproxy':
    primitives:   ['clone_haproxy', 'vip2']

profile::highavailability::corosync::clones:
  'clone_haproxy':
    primitive:              'haproxy'
    globally_unique:        false
    clone_max:              2
    clone_node_max:         1

profile::highavailability::corosync::locations:
  'vip_location1':
    primitive:  'vip1'
    node_name:  "%{hiera('corosync_cluster_node1')}"
    score:      'INFINITY'
  'vip_location2':
    primitive:  'vip2'
    node_name:  "%{hiera('corosync_cluster_node2')}"
    score:      'INFINITY'
