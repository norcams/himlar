
router id <%= @ipaddress_trp1 %>;

<% if @debug %>debug protocols all;
<% end -%>

filter export_bgp {
  if  net != 0.0.0.0/0 then {
    accept;
  }
  reject;
}

# Configure synchronization between BIRD's routing tables and the
# kernel.
protocol kernel {
  ipv4 {               # Connect protocol to IPv4 table by channel
    table master4;     # Default IPv4 table is master4
    import all;
    export filter export_bgp;
  };
  learn;          # Learn all alien routes from the kernel
  persist;        # Don't remove routes on bird shutdown
  scan time 2;    # Scan kernel routing table every 2 seconds
  graceful restart;
}

protocol bfd {
<% scope().call_function('hiera',['netcfg_trp_rr']).each do |name| %><%if name[1]['peer_ipv4'] %>  neighbor <%= name[1]['peer_ipv4'] %>;
<% end %><% end %>}

# Watch interface up/down events.
protocol device {
  scan time 2;    # Scan interfaces every 2 seconds
}

protocol direct {
   ipv4;
   debug all;
   interface "*";
}

<% if scope().call_function('hiera',['netcfg_trp_rr']) -%><% scope().call_function('hiera',['netcfg_trp_rr']).each do |name, values| %>protocol bgp '<%= name %>_ipv4' {
  local as <%= scope().call_function('hiera',['bgp_as']) %>;
  neighbor <%= values["peer_ipv4"] %> as <%= scope().call_function('hiera',['bgp_as']) %>;
  ipv4 {
    import all;
    export filter export_bgp;
  };
  multihop;
  graceful restart;
  source address <%= @ipaddress_trp1 %>;  # The local address we use for the TCP connection
}
<% end %><% end -%>
